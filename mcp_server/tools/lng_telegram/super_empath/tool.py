"""
Super Empath - –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö
"""

import json
import uuid
import os
from datetime import datetime
from typing import Dict, Any

import mcp.types as types

from mcp_server.logging_config import setup_instance_logger, close_instance_logger

# –õ–æ–≥–≥–µ—Ä –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
logger = setup_instance_logger("super_empath", "telegram")

async def tool_info() -> dict:
    """Returns information about the lng_telegram_super_empath tool."""
    return {
        "description": "Super Empath - –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö",
        "schema": {
            "type": "object",
            "properties": {
                "telegram_context": {
                    "type": "string",
                    "description": "Telegram context JSON string with user and message information"
                },
                "prompt_template_name": {
                    "type": "string",
                    "description": "Name of the prompt template to use for LLM processing",
                    "default": "default_super_empath"
                }
            },
            "required": ["telegram_context"]
        }
    }

class SuperEmpathProcessor:
    """–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä Super Empath –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    def __init__(self):
        self.session_file = "mcp_server/config/telegram/super_empath_sessions.json"
        self._ensure_session_file()
        
    def _ensure_session_file(self):
        """–£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —Ñ–∞–π–ª —Å–µ—Å—Å–∏–π —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
        os.makedirs(os.path.dirname(self.session_file), exist_ok=True)
        if not os.path.exists(self.session_file):
            with open(self.session_file, 'w', encoding='utf-8') as f:
                json.dump({"sessions": {}, "users": {}}, f)
                
    def _load_sessions(self) -> dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Å—Å–∏–π –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            with open(self.session_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except:
            return {"sessions": {}, "users": {}}
            
    def _save_sessions(self, data: dict):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π –≤ —Ñ–∞–π–ª"""
        try:
            with open(self.session_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"Failed to save sessions: {e}")
            
    async def improve_message_with_llm(self, message: str, user_id: str, template_name: str = "default_super_empath") -> dict:
        """–£–ª—É—á—à–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ LLM —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∏—Å—Ç–æ—Ä–∏–∏ —Å–µ—Å—Å–∏–∏"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            conversation_history = self._get_conversation_history(user_id)
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏ –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ LLM
            from mcp_server.tools.tool_registry import run_tool as execute_tool
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º LLM prompt template
            llm_params = {
                "command": "use",
                "template_name": template_name,
                "conversation_history": conversation_history,
                "user_message": message,
                "user_id": user_id
            }
            
            result_content = await execute_tool("lng_llm_prompt_template", llm_params)
            
            if result_content and len(result_content) > 0:
                result_text = result_content[0].text
                # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç –æ—Ç LLM
                import json
                llm_response = json.loads(result_text)
                
                logger.info(f"LLM response for user {user_id}: {llm_response}")
                
                return {
                    "explanation": llm_response.get("explanation", ""),
                    "suggestion": llm_response.get("suggestion", message),
                    "success": True
                }
            else:
                logger.error("Empty response from LLM")
                return {
                    "explanation": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç LLM",
                    "suggestion": message,
                    "success": False
                }
                
        except Exception as e:
            logger.error(f"Error in improve_message_with_llm: {e}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            return {
                "explanation": f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}",
                "suggestion": message,
                "success": False
            }
    
    def _get_conversation_history(self, user_id: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º session_id –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            data = self._load_sessions()
            user_data = data["users"].get(str(user_id))
            
            if not user_data:
                return "–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø—É—Å—Ç–∞."
                
            session_id = user_data.get("session_id")
            if not session_id:
                return "–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø—É—Å—Ç–∞."
                
            # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏—Å—Ç–æ—Ä–∏–∏: sessions/<SESSION_ID>/<USER_ID>.txt
            history_dir = f"mcp_server/config/telegram/sessions/{session_id}"
            os.makedirs(history_dir, exist_ok=True)
            
            history_file = f"{history_dir}/{user_id}.txt"
            
            if os.path.exists(history_file):
                with open(history_file, 'r', encoding='utf-8') as f:
                    return f.read()
            else:
                return "–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø—É—Å—Ç–∞."
                
        except Exception as e:
            logger.error(f"Error reading conversation history for user {user_id}: {e}")
            return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π."
    
    def _save_to_history(self, user_id: str, emoji: str, label: str, message: str, session_id: str = None, timestamp: bool = True):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª—é–±–æ–≥–æ —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º session_id –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
            if not session_id:
                data = self._load_sessions()
                user_data = data["users"].get(str(user_id))
                if user_data:
                    session_id = user_data.get("session_id")
                    
            if not session_id:
                logger.error(f"No session_id found for user {user_id}")
                return
                
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫: sessions/<SESSION_ID>/<USER_ID>.txt
            history_dir = f"mcp_server/config/telegram/sessions/{session_id}"
            os.makedirs(history_dir, exist_ok=True)
            
            history_file = f"{history_dir}/{user_id}.txt"
            
            # –§–æ—Ä–º–∞—Ç: {emoji}[{label}] (timestamp): {message}
            if timestamp:
                timestamp_str = f" ({datetime.now().strftime('%Y-%m-%d %H:%M:%S')})"
            else:
                timestamp_str = ""
            
            history_entry = f"{emoji}[{label}]{timestamp_str}: {message}\n"
            
            with open(history_file, 'a', encoding='utf-8') as f:
                f.write(history_entry)
                
            logger.info(f"Saved message to history for user {user_id} in session {session_id}: {emoji}[{label}]")
            
        except Exception as e:
            logger.error(f"Error saving message to history for user {user_id}: {e}")

    # –£–¥–æ–±–Ω—ã–µ –º–µ—Ç–æ–¥—ã-–æ–±–µ—Ä—Ç–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
    def _save_message_to_history(self, user_id: str, user_name: str, message: str, session_id: str = None):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self._save_to_history(user_id, "üí¨", f"{user_id}|{user_name}", message, session_id)
    
    def _save_empath_message_to_history(self, user_id: str, message: str, session_id: str = None):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
        self._save_to_history(user_id, "üí°ü§ñ", "EMPATH", message, session_id)
    
    def _save_empath_sent_message_to_history(self, user_id: str, message: str, session_id: str = None):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è"""
        self._save_to_history(user_id, "‚¨ÖÔ∏èü§ñ", "EMPATH", message, session_id)
    
    def _save_incoming_message_to_history(self, user_id: str, sender_id: str, sender_name: str, message: str, session_id: str = None):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –¥—Ä—É–≥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        self._save_to_history(user_id, "‚û°Ô∏è", f"{sender_id}|{sender_name}", message, session_id)
    
    def _save_system_message_to_history(self, user_id: str, user_name: str, message: str, session_id: str = None):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        self._save_to_history(user_id, "‚öôÔ∏è", "–°–ò–°–¢–ï–ú–ê", message, session_id)
    
    def _save_command_to_history(self, user_id: str, user_name: str, command: str, emoji: str, session_id: str = None):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã (‚úÖ /tamam, ‚ùå /cancel)"""
        self._save_to_history(user_id, emoji, f"{user_id}|{user_name}", command, session_id)

        
    async def handle_command(self, telegram_context: dict) -> dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ Super Empath"""
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –æ–±—ä–µ–∫—Ç–∞ message
        message_obj = telegram_context.get("message", {})
        if isinstance(message_obj, dict):
            message = message_obj.get("text", "").strip()
        else:
            message = str(message_obj).strip()
        user_id = telegram_context.get("user_id")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        data = self._load_sessions()
        user_data = data["users"].get(str(user_id))
        
        if message.startswith("/start"):
            return self._handle_start_command(telegram_context)
        elif message == "/tamam":
            return self._handle_approve_command(telegram_context)
        elif message == "/cancel":
            return self._handle_cancel_command(telegram_context)
        elif not user_data:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
            return self._handle_welcome_message(telegram_context)
        else:
            return await self._handle_regular_message(telegram_context)
            
    def _handle_welcome_message(self, telegram_context: dict) -> dict:
        """–ü–æ–∫–∞–∑ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        first_name = telegram_context.get("first_name", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –æ–±—ä–µ–∫—Ç–∞ message
        message_obj = telegram_context.get("message", {})
        if isinstance(message_obj, dict):
            message = message_obj.get("text", "").strip()
        else:
            message = str(message_obj).strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ deep link –∏–ª–∏ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        session_id = None
        if " " in message:
            parts = message.split(" ", 1)
            if len(parts) > 1:
                session_id = parts[1]
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å session_id, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        is_joining = session_id is not None
        
        welcome_text = self._get_welcome_message(first_name, is_joining_session=is_joining)
        
        return {
            "response": welcome_text,
            "action": "welcome_shown"
        }
            
    def _get_welcome_message(self, first_name: str, is_joining_session: bool = False, session_id: str = None) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—â–∏–º —à–∞–±–ª–æ–Ω–æ–º"""
                
        base_message = f"""üéØ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {first_name}!

–ï—Å–ª–∏ –≤—ã —Ç—É—Ç - –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–ª–∞–¥–∏—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏—è.

–ö–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –≤–∞–º–∏ –±—É–¥–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –∏ —ç–∫–æ–Ω–æ–º–∏—á–Ω—É—é –º–æ–¥–µ—Ä–∞—Ü–∏—é. –í—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ –ú–µ–¥–∏–∞—Ç–æ—Ä–∞ —Å –≤–∞—à–∏–º–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞–º–∏. –í–æ–∑—Ä–∞–∂–∞–π—Ç–µ, –¥–∞–≤–∞–π—Ç–µ –µ–º—É –±–æ–ª—å—à–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –≤—ã –≤–º–µ—Å—Ç–µ –ø–æ–¥–±–µ—Ä–µ—Ç–µ –Ω–∞–∏–ª—É—á—à—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é.

–¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã —Å–∫–∞–∂–µ—Ç–µ /tamam –æ–Ω–æ —É–π–¥–µ—Ç –≤—Å–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞–º. –ï—Å–ª–∏ –∂–µ –≤—ã —Å–∫–∞–∂–µ—Ç–µ /cancel –æ–Ω–æ –±—É–¥–µ—Ç –∑–∞–±—ã—Ç–æ.

–í–∞—à–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∏ –±—É–¥—É—Ç —Ç–∞–∫ –∂–µ –º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∏—Ö –≤–∞–º.

–£–¥–∞—á–∏ –≤ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–∞—Ö!"""

        # –¢–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–≤—à–∏—Ö—Å—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º session_id
        if is_joining_session and session_id:
            specific_part = f"\n\n–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —Å–µ—Å—Å–∏–∏: {session_id}"
        else:
            specific_part = ""
        
        return base_message + specific_part

    def _handle_start_command(self, telegram_context: dict) -> dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = telegram_context.get("user_id")
        first_name = telegram_context.get("first_name", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –æ–±—ä–µ–∫—Ç–∞ message
        message_obj = telegram_context.get("message", {})
        if isinstance(message_obj, dict):
            message = message_obj.get("text", "").strip()
        else:
            message = str(message_obj).strip()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º session_id –∏–∑ deep link
        session_id = None
        if " " in message:
            parts = message.split(" ", 1)
            if len(parts) > 1:
                session_id = parts[1]
                
        data = self._load_sessions()
        
        if session_id:
            # –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–µ—Å—Å–∏–∏
            if session_id in data["sessions"]:
                session = data["sessions"][session_id]
                if user_id not in session["participants"]:
                    session["participants"].append(user_id)
                    session["last_activity"] = datetime.now().isoformat()
                    
                data["users"][str(user_id)] = {
                    "session_id": session_id,
                    "first_name": first_name,
                    "joined_at": datetime.now().isoformat()
                }
                
                self._save_sessions(data)
                
                # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–≤—à–µ–≥–æ—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
                self._save_system_message_to_history(user_id, first_name, f"–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —Å–µ—Å—Å–∏–∏ {session_id}", session_id)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–≤—à–µ–≥–æ—Å—è
                welcome_message = self._get_welcome_message(first_name, is_joining_session=True, session_id=session_id)
                
                return {
                    "response": welcome_message,
                    "session_id": session_id,
                    "action": "joined_session"
                }
            else:
                return {
                    "response": "‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ.",
                    "action": "session_not_found"
                }
        else:
            # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
            new_session_id = str(uuid.uuid4())[:8]  # –ö–æ—Ä–æ—Ç–∫–∏–π ID –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
            
            data["sessions"][new_session_id] = {
                "participants": [user_id],
                "created_at": datetime.now().isoformat(),
                "last_activity": datetime.now().isoformat(),
                "created_by": user_id
            }
            
            data["users"][str(user_id)] = {
                "session_id": new_session_id,
                "first_name": first_name,
                "joined_at": datetime.now().isoformat()
            }
            
            self._save_sessions(data)
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è —Å–µ—Å—Å–∏–∏
            self._save_system_message_to_history(user_id, first_name, f"–°–æ–∑–¥–∞–ª —Å–µ—Å—Å–∏—é {new_session_id}", new_session_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è —Å–µ—Å—Å–∏–∏
            welcome_message = self._get_welcome_message(first_name, is_joining_session=False)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –∏–º—è –±–æ—Ç–∞)
            invite_link = f"https://t.me/IStillLoveYou_Bot?start={new_session_id}"
            
            # –õ–æ–≥–∏—Ä—É–µ–º —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º
            logger.info(f"Generated invite link: {invite_link}")
            
            # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Å—ã–ª–∫–µ (–≤–æ–∑–≤—Ä–∞—â–∞–µ–º —ç–º–æ–¥–∑–∏)
            full_message = f"{welcome_message}\n\nüîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤:\n\n{invite_link}\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É —Ç–µ–º, –∫–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É—Å–ª—ã—à–∞—Ç—å –∏ –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –±—ã—Ç—å —É—Å–ª—ã—à–∞–Ω—ã."
            
            return {
                "response": full_message,
                "session_id": new_session_id,
                "invite_link": invite_link,
                "action": "created_session"
            }
            
    async def _handle_regular_message(self, telegram_context: dict) -> dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ LLM"""
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –æ–±—ä–µ–∫—Ç–∞ message
        message_obj = telegram_context.get("message", {})
        if isinstance(message_obj, dict):
            message = message_obj.get("text", "").strip()
        else:
            message = str(message_obj).strip()
        user_id = str(telegram_context.get("user_id"))
        first_name = telegram_context.get("first_name", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        template_name = telegram_context.get("prompt_template_name", "default_super_empath")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–µ—Å—Å–∏–∏
        data = self._load_sessions()
        user_data = data["users"].get(str(user_id))
        
        if not user_data:
            return {
                "response": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start",
                "action": "not_registered"
            }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
        session_id = user_data.get("session_id")
        self._save_message_to_history(user_id, first_name, message, session_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç LLM
        llm_result = await self.improve_message_with_llm(message, user_id, template_name)
        
        if llm_result["success"]:
            explanation = llm_result["explanation"]
            suggestion = llm_result["suggestion"]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏
            self._save_to_history(user_id, "ü§îü§ñ", "EMPATH", explanation, session_id)
            self._save_to_history(user_id, "üí°ü§ñ", "EMPATH", f"–ü—Ä–µ–¥–ª–∞–≥–∞—é: {suggestion}", session_id)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–¥–æ–±—Ä–µ–Ω–∏—è
            user_data["pending_message"] = {
                "original": message,
                "improved": suggestion,
                "explanation": explanation,
                "timestamp": datetime.now().isoformat()
            }
            
            data["users"][str(user_id)] = user_data
            self._save_sessions(data)
            
            response = f"""ü§î {explanation}

üí° –ü—Ä–µ–¥–ª–∞–≥–∞—é: {suggestion}

–ù–∞–ø–∏—à–∏—Ç–µ ‚úÖ /tamam –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ ‚ùå /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."""
        
        else:
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ LLM –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            error_message = "–ü—Ä–æ—Å—Ç–∏—Ç–µ, —Å–µ–π—á–∞—Å —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
            self._save_empath_message_to_history(user_id, "–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", session_id)
            
            return {
                "response": error_message,
                "original": message,
                "improved": message,  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                "explanation": llm_result["explanation"],
                "action": "service_unavailable"
            }

        return {
            "response": response,
            "original": message,
            "improved": llm_result.get("suggestion", message),
            "explanation": llm_result.get("explanation", ""),
            "action": "message_processed"
        }
        
    def _handle_approve_command(self, telegram_context: dict) -> dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –æ–¥–æ–±—Ä–µ–Ω–∏—è '/tamam'"""
        user_id = telegram_context.get("user_id")
        first_name = telegram_context.get("first_name", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        
        data = self._load_sessions()
        user_data = data["users"].get(str(user_id))
        
        if not user_data or "pending_message" not in user_data:
            return {
                "response": "‚ö†Ô∏è –í—ã –µ—â–µ –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏",
                "action": "no_pending_message"
            }
            
        pending = user_data["pending_message"]
        session_id = user_data["session_id"]
        
        if session_id not in data["sessions"]:
            return {
                "response": "–û—à–∏–±–∫–∞: —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                "action": "session_error"
            }
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É "/tamam" –≤ –∏—Å—Ç–æ—Ä–∏—é
        self._save_command_to_history(user_id, first_name, "/tamam", "‚úÖ", session_id)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–∫—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        final_message = "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ."
        self._save_empath_sent_message_to_history(user_id, final_message, session_id)
        
        session = data["sessions"][session_id]
        participants = session["participants"]
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–µ—Å—Å–∏–∏
        sender_name = user_data.get("first_name", "–£—á–∞—Å—Ç–Ω–∏–∫")
        other_participants = [p for p in participants if p != user_id]
        
        for participant_id in other_participants:
            try:
                self._save_incoming_message_to_history(
                    str(participant_id), 
                    str(user_id),  # sender_id
                    sender_name, 
                    pending['improved'], 
                    session_id
                )
                logger.info(f"Logged incoming message for participant {participant_id} from {sender_name}")
            except Exception as e:
                logger.error(f"Failed to log incoming message for participant {participant_id}: {e}")
        
        # –û—á–∏—â–∞–µ–º pending message
        del user_data["pending_message"]
        data["users"][str(user_id)] = user_data
        self._save_sessions(data)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥—Ä—É–≥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
        other_participants = [p for p in participants if p != user_id]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        response_text = f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(other_participants)} —É—á–∞—Å—Ç–Ω–∏–∫–∞–º\n{pending['improved']}"
        
        return {
            "response": response_text,
            "action": "message_approved",
            "improved_message": pending["improved"],
            "original_message": pending["original"],
            "recipients": other_participants,
            "sender_name": user_data.get("first_name", "–£—á–∞—Å—Ç–Ω–∏–∫"),
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–º —Å–ª–æ–µ–º
            "auto_send": {
                "to_users": other_participants,
                "message": f"üí¨ {user_data.get('first_name', '–£—á–∞—Å—Ç–Ω–∏–∫')}: {pending['improved']}"
            }
        }
        
    def _handle_cancel_command(self, telegram_context: dict) -> dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ–Ω—ã '/cancel'"""
        user_id = telegram_context.get("user_id")
        first_name = telegram_context.get("first_name", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        
        data = self._load_sessions()
        user_data = data["users"].get(str(user_id))
        
        if not user_data or "pending_message" not in user_data:
            return {
                "response": "‚ö†Ô∏è –í—ã –µ—â–µ –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏",
                "action": "no_pending_operation"
            }
        
        session_id = user_data.get("session_id")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É "/cancel" –≤ –∏—Å—Ç–æ—Ä–∏—é
        self._save_command_to_history(user_id, first_name, "/cancel", "‚ùå", session_id)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–∫—Ç –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏
        self._save_empath_sent_message_to_history(user_id, "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", session_id)
            
        # –û—á–∏—â–∞–µ–º pending message
        del user_data["pending_message"]
        data["users"][str(user_id)] = user_data
        self._save_sessions(data)
        
        return {
            "response": "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
            "action": "operation_cancelled"
        }

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
_processor = SuperEmpathProcessor()

async def tool_lng_telegram_super_empath(
    telegram_context: str,
    prompt_template_name: str = "default_super_empath"
) -> Dict[str, Any]:
    """
    Super Empath - –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞
    
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ —Å LLM
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç telegram_context –∫–∞–∫ JSON —Å—Ç—Ä–æ–∫—É
    """
    
    try:
        if not telegram_context:
            return {"error": "telegram_context is required"}
        
        # –ü–∞—Ä—Å–∏–º telegram_context –∏–∑ JSON —Å—Ç—Ä–æ–∫–∏
        import json
        try:
            context_obj = json.loads(telegram_context)
            logger.info("Parsed telegram_context from JSON string")
        except json.JSONDecodeError as e:
            logger.error(f"Invalid JSON in telegram_context: {e}")
            return {"error": f"Invalid telegram_context JSON: {e}"}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ —Å–ª–æ–≤–∞—Ä—å
        if not isinstance(context_obj, dict):
            logger.error(f"telegram_context must be dict, got: {type(context_obj)}")
            return {"error": f"Invalid telegram_context type: {type(context_obj)}"}
        
        # –î–æ–±–∞–≤–ª—è–µ–º prompt_template_name –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–º
        context_obj["prompt_template_name"] = prompt_template_name
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        result = await _processor.handle_command(context_obj)
        
        logger.info(f"Processed message from user {context_obj.get('user_id')}: {context_obj.get('message')}")
        
        return result
        
    except Exception as e:
        logger.error(f"Error in super empath tool: {e}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")
        return {"error": f"Super empath processing failed: {e}"}

async def run_tool(name: str, parameters: dict) -> list[types.Content]:
    """Executes the Super Empath tool."""
    try:
        result = await tool_lng_telegram_super_empath(**parameters)
        return [types.TextContent(type="text", text=json.dumps(result, indent=2, ensure_ascii=False))]
    except Exception as e:
        error_result = {"error": str(e)}
        return [types.TextContent(type="text", text=json.dumps(error_result, ensure_ascii=False))]
